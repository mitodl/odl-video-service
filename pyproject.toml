[tool.poetry]
name = "odl-video-service"
version = "0.70.0"
description = "building blocks for a basic video service for ODL"
authors = ["Your Name <you@example.com>"]
license = "BSD-3"
readme = "README.md"
packages = []

[tool.poetry.dependencies]
python = "^3.12"
beautifulsoup4 = "^4.9.0"
boto3 = "^1.12.26"
celery = "^5.2.2"
celery-redbeat = "^2.0.0"
cryptography = "^42.0"
dj-database-url = "^2.1"
dj-static = "^0.0.6"
django = "^4.2"
django-elastic-transcoder = {git = "https://github.com/mitodl/django-elastic-transcoder", tag = "v0.9.7"}
django-encrypted-model-fields = "^0.6.5"
django-hijack = "^3.4"
django-redis = "^5.2.0"
django-shibboleth-remoteuser = {git = "https://github.com/Brown-University-Library/django-shibboleth-remoteuser", tag = "v0.12"}
django-webpack-loader = "^3.1"
djangorestframework = "^3.11.2"
google-api-python-client = "^2.58.0"
google-auth = "^2.11.0"
google-auth-oauthlib = "^1.2.0"
html5lib = "^1.1"
httplib2 = "^0.22.0"
ipython = "^8.24"
mit-moira = {git = "https://github.com/mitodl/mit-moira", tag = "v0.0.4"}
newrelic = "^8.8.0"
psycopg2 = "^2.9.9"
pycountry = "^22.3.5"
python-dateutil = "^2.8.1"
pytz = "^2024.1"
redis = "^4.4.4"
requests = "^2.20.0"
sentry-sdk = "^0.14.3"
smart-open = {extras = ["all"], version = "^7.0.4"}
structlog = "^24.1.0"
structlog-sentry = "^1.2.2"
urllib3 = "^1.24.2"
uwsgi = "2.0.25"


[tool.poetry.group.dev.dependencies]
bpython = "*"
ddt = "^1.6.0"
django-debug-toolbar = "^4"
factory-boy = "^3.2.1"
faker = "^18.7.0"
ipdb = "^0.13"
moto = "^5"
nplusone = "^1.0.0"
pdbpp = "^0.10.3"
pre-commit = "^3.7.1"
pytest = "^7.3.1"
pytest-cov = "^5.0.0"
pytest-django = "^4.5.2"
pytest-env = "^1"
pytest-mock = "^3.10.0"
pytest-pep8 = "^1.0.6"
requests-mock = "^1.10.0"
ruff = "^0.4"
semantic-version = "^2.10.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"
line-length = 88
lint.select = [
    "A",  # flake8-builtins
    # "AIR",  # Airflow
    # "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    # "ASYNC",  # flake8-async
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90",  # mccabe
    # "COM",  # flake8-commas
    "CPY",  # flake8-copyright
    "D",  # pydocstyle
    "DJ",  # flake8-django
    "DTZ",  # flake8-datetimez
    "E",  # Pycodestyle Error
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    # "FURB",  # refurb
    "G",  # flake8-logging-format
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    "N",  # pep8-naming
    # "NPY",  # NumPy-specific rules
    # "PD",  # pandas-vet
    "PERF",  # Perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # Pylint
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "S",  # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TD",  # flake8-todos
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Pycodestyle Warning
    "YTT",  # flake8-2020
]
lint.ignore = [
    "B008",
    "B905",
    "D104",
    "D200",
    "D202",
    "D205",
    "D301",
    "D400",
    "N803",
    "N806",
    "N999",
    "PIE804",
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "RUF012",
    "UP007"
]

lint.typing-modules = ["colour.hints"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.per-file-ignores]
"*_test.py" = ["ARG001", "E501", "S101", "PLR2004"]
"test_*.py" = ["ARG001", "E501", "S101", "PLR2004"]
"**/migrations/**" = ["ARG001"]
