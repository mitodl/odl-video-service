name: CI
on: [push]
jobs:
  python-tests:
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      db:
        # Docker Hub image
        image: postgres:17.6
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres  # pragma: allowlist secret
          POSTGRES_DB: postgres
        ports:
          - 5432:5432

      redis:
        image: redis:8.2.1@sha256:acb90ced0bd769b7c04cb4c32c4494ba7b3e0ee068bdbfff0eeb0d31c2a21078
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Apt install
        run: cat Aptfile | sudo xargs apt-get install

      - name: Install poetry
        uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1
        with:
          version: 1.8.3
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
        with:
          python-version: "3.13.7"
          cache: poetry

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Code formatting
        run: poetry run ruff format --check . --exclude '*/migrations/'

      - name: Tests
        run: |
          export MEDIA_ROOT="$(mktemp -d)"
          ./scripts/test/python_tests.sh
        env:
          DEBUG: 'False'
          NODE_ENV: 'production'
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres  # pragma: allowlist secret
          ODL_VIDEO_SECURE_SSL_REDIRECT: 'False'
          ODL_VIDEO_DB_DISABLE_SSL: 'True'
          CELERY_TASK_ALWAYS_EAGER: 'True'
          REDIS_URL: redis://localhost:6379/4
          XDG_CACHE_HOME: /src/.cache
          SECRET_KEY: actions_secret
          AWS_ACCESS_KEY_ID: fakeawskey
          AWS_SECRET_ACCESS_KEY: fakeawssecret
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: fakeawsaccountid
          AWS_ROLE_NAME: fakeawsrolename
          CLOUDFRONT_KEY_ID: cfkeyid
          DROPBOX_KEY: foo_dropbox_key
          ET_PIPELINE_ID: foo_et_pipeline_id
          FIELD_ENCRYPTION_KEY: jtma0CL1QMRLaJgjXNlJh3mtPNcgok0G5ajRCMZ_XNI=
          GA_DIMENSION_CAMERA: fake
          GA_KEYFILE_JSON: fake
          GA_VIEW_ID: fake
          GA_TRACKING_ID: fake
          LECTURE_CAPTURE_USER: admin
          MAILGUN_URL: http://fake_mailgun_url.com
          MAILGUN_KEY: foookey
          ODL_VIDEO_BASE_URL: http://video.example.com
          VIDEO_S3_BUCKET: video-s3
          VIDEO_S3_TRANSCODE_BUCKET: video-s3-transcodes
          VIDEO_S3_THUMBNAIL_BUCKET: video-s3-thumbs
          VIDEO_S3_SUBTITLE_BUCKET: video-s3-subtitles
          VIDEO_S3_WATCH_BUCKET: video-s3-watch
          VIDEO_CLOUDFRONT_DIST: video-cf
          YT_ACCESS_TOKEN: fake
          YT_REFRESH_TOKEN: fake
          YT_CLIENT_ID: fake
          YT_CLIENT_SECRET: fakse  # pragma: allowlist secret
          YT_PROJECT_ID: fake

      - name: Upload coverage to CodeCov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
        with:
          file: ./coverage.xml

  javascript-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up NodeJS
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: 22.19.0

      - name: Setup environment
        run: sudo apt-get install libelf1

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> "$GITHUB_OUTPUT"

      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-engines --prefer-offline

      - name: Lints
        run: npm run lint

      - name: Tests
        run: npm run test
        env:
          CODECOV: true
          NODE_ENV: development

      - name: Webpack build
        run: node node_modules/webpack/bin/webpack.js --config webpack.config.prod.js --bail

      - name: Upload test coverage to CodeCov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
        with:
          file: coverage/lcov.info
